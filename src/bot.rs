use teloxide::{
    prelude::*,
    types::{InlineKeyboardButton, InlineKeyboardMarkup, ParseMode},
    utils::command::BotCommands,
    dispatching::UpdateHandler,
    RequestError,
};
use log::{info, error};

use crate::game::DiceGame;
use crate::state::{EvenOddChoice, HighLowChoice, GuessOneChoice};

/// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")]
pub enum Command {
    #[command(description = "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")]
    Start,
    #[command(description = "–ü–æ–º–æ—â—å")]
    Help,
    #[command(description = "–ò–≥—Ä–∞—Ç—å –≤ –∫—É–±–∏–∫–∏")]
    Play,
}

pub struct BotHandler;

impl BotHandler {
    pub fn new() -> Self {
        Self
    }

    /// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    pub fn schema(&self) -> UpdateHandler<RequestError> {
        use dptree::case;

        let command_handler = teloxide::filter_command::<Command, _>()
            .branch(case![Command::Start].endpoint(Self::start_command))
            .branch(case![Command::Help].endpoint(Self::help_command))
            .branch(case![Command::Play].endpoint(Self::play_command));

        let callback_handler = Update::filter_callback_query()
            .endpoint(Self::handle_callback);

        let message_handler = Update::filter_message()
            .branch(command_handler)
            .branch(dptree::endpoint(Self::handle_message));

        dptree::entry()
            .branch(message_handler)
            .branch(callback_handler)
    }

    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    async fn start_command(bot: Bot, msg: Message) -> ResponseResult<()> {
        info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º", msg.chat.id);
        
        let text = "üé≤ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É —Å –∫—É–±–∏–∫–∞–º–∏!\n\n\
                   –Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º —É–≥–∞–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞.\n\
                   –î–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ç—ã—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–≥—Ä—ã:\n\n\
                   üîµ –ß–µ—Ç–Ω–æ–µ/–ù–µ—á–µ—Ç–Ω–æ–µ - —É–≥–∞–¥–∞–π—Ç–µ —á–µ—Ç–Ω–æ—Å—Ç—å —á–∏—Å–ª–∞\n\
                   üî¥ –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ 3.5 - —É–≥–∞–¥–∞–π—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω\n\
                   üéØ –¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ - —É–≥–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n\
                   üé± –£–≥–∞–¥–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—É - –≤—ã–ø–∞–¥–µ—Ç –ª–∏ –µ–¥–∏–Ω–∏—Ü–∞\n\n\
                   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!";

        bot.send_message(msg.chat.id, text)
            .parse_mode(ParseMode::Html)
            .await?;
        
        Ok(())
    }

    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    async fn help_command(bot: Bot, msg: Message) -> ResponseResult<()> {
        let text = "üéÆ <b>–ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ –≤ –∫—É–±–∏–∫–∏</b>\n\n\
                   <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\
                   /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n\
                   /play - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n\
                   /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n\
                   <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –∏–≥—Ä—ã:</b>\n\n\
                   üîµ <b>–ß–µ—Ç–Ω–æ–µ/–ù–µ—á–µ—Ç–Ω–æ–µ</b>\n\
                   –£–≥–∞–¥–∞–π—Ç–µ, –±—É–¥–µ—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ç–Ω—ã–º –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω—ã–º —á–∏—Å–ª–æ–º\n\n\
                   üî¥ <b>–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ 3.5</b>\n\
                   –£–≥–∞–¥–∞–π—Ç–µ, –±—É–¥–µ—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª—å—à–µ 3.5 (4-6) –∏–ª–∏ –º–µ–Ω—å—à–µ 3.5 (1-3)\n\n\
                   üéØ <b>–¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ</b>\n\
                   –£–≥–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6\n\n\
                   ‚öÄ <b>–£–≥–∞–¥–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—É</b>\n\
                   –£–≥–∞–¥–∞–π—Ç–µ, –≤—ã–ø–∞–¥–µ—Ç –ª–∏ –Ω–∞ –∫—É–±–∏–∫–µ –µ–¥–∏–Ω–∏—Ü–∞";

        bot.send_message(msg.chat.id, text)
            .parse_mode(ParseMode::Html)
            .await?;
        
        Ok(())
    }

    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /play
    async fn play_command(bot: Bot, msg: Message) -> ResponseResult<()> {
        info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∏–≥—Ä—É", msg.chat.id);
        Self::show_game_selection(&bot, msg.chat.id).await
    }

    /// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–≥—Ä—ã
    async fn show_game_selection(bot: &Bot, chat_id: ChatId) -> ResponseResult<()> {
        let keyboard = InlineKeyboardMarkup::new(vec![
            vec![InlineKeyboardButton::callback("üîµ –ß–µ—Ç–Ω–æ–µ/–ù–µ—á–µ—Ç–Ω–æ–µ", "game_even_odd")],
            vec![InlineKeyboardButton::callback("üî¥ –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ 3.5", "game_high_low")],
            vec![InlineKeyboardButton::callback("üéØ –¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ", "game_exact")],
            vec![InlineKeyboardButton::callback("‚öÄ –£–≥–∞–¥–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—É", "game_guess_one")],
        ]);

        let text = "üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–≥—Ä—ã:";

        bot.send_message(chat_id, text)
            .reply_markup(keyboard)
            .await?;
        
        Ok(())
    }

    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    async fn handle_callback(bot: Bot, callback: CallbackQuery) -> ResponseResult<()> {
        if let Some(data) = &callback.data {
            if let Some(message) = &callback.message {
                let chat_id = message.chat.id;
                
                match data.as_str() {
                    "game_even_odd" => {
                        Self::start_even_odd_game(&bot, chat_id).await?;
                    }
                    "game_high_low" => {
                        Self::start_high_low_game(&bot, chat_id).await?;
                    }
                    "game_exact" => {
                        Self::start_exact_number_game(&bot, chat_id).await?;
                    }
                    "game_guess_one" => {
                        Self::start_guess_one_game(&bot, chat_id).await?;
                    }
                    "choice_even" => {
                        Self::play_even_odd_game(&bot, chat_id, EvenOddChoice::Even).await?;
                    }
                    "choice_odd" => {
                        Self::play_even_odd_game(&bot, chat_id, EvenOddChoice::Odd).await?;
                    }
                    "choice_high" => {
                        Self::play_high_low_game(&bot, chat_id, HighLowChoice::High).await?;
                    }
                    "choice_low" => {
                        Self::play_high_low_game(&bot, chat_id, HighLowChoice::Low).await?;
                    }
                    "guess_one_yes" => {
                        Self::play_guess_one_game(&bot, chat_id, GuessOneChoice::Yes).await?;
                    }
                    "guess_one_no" => {
                        Self::play_guess_one_game(&bot, chat_id, GuessOneChoice::No).await?;
                    }
                    data if data.starts_with("number_") => {
                        if let Ok(number) = data[7..].parse::<u8>() {
                            if (1..=6).contains(&number) {
                                Self::play_exact_number_game(&bot, chat_id, number).await?;
                            }
                        }
                    }
                    _ => {
                        error!("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {}", data);
                    }
                }
            }
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback –∑–∞–ø—Ä–æ—Å–∞
        bot.answer_callback_query(callback.id).await?;
        Ok(())
    }

    /// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã "–ß–µ—Ç–Ω–æ–µ/–ù–µ—á–µ—Ç–Ω–æ–µ"
    async fn start_even_odd_game(bot: &Bot, chat_id: ChatId) -> ResponseResult<()> {
        let keyboard = InlineKeyboardMarkup::new(vec![
            vec![
                InlineKeyboardButton::callback("üîµ –ß–µ—Ç–Ω–æ–µ", "choice_even"),
                InlineKeyboardButton::callback("üî¥ –ù–µ—á–µ—Ç–Ω–æ–µ", "choice_odd"),
            ],
        ]);

        let text = "üîµ <b>–ò–≥—Ä–∞: –ß–µ—Ç–Ω–æ–µ/–ù–µ—á–µ—Ç–Ω–æ–µ</b>\n\n\
                   –í—ã–±–µ—Ä–∏—Ç–µ, –±—É–¥–µ—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ —á–µ—Ç–Ω—ã–º –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω—ã–º —á–∏—Å–ª–æ–º:";

        bot.send_message(chat_id, text)
            .parse_mode(ParseMode::Html)
            .reply_markup(keyboard)
            .await?;
        
        Ok(())
    }

    /// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã "–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ 3.5"
    async fn start_high_low_game(bot: &Bot, chat_id: ChatId) -> ResponseResult<()> {
        let keyboard = InlineKeyboardMarkup::new(vec![
            vec![
                InlineKeyboardButton::callback("‚¨ÜÔ∏è –ë–æ–ª—å—à–µ 3.5 (4-6)", "choice_high"),
                InlineKeyboardButton::callback("‚¨áÔ∏è –ú–µ–Ω—å—à–µ 3.5 (1-3)", "choice_low"),
            ],
        ]);

        let text = "üî¥ <b>–ò–≥—Ä–∞: –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ 3.5</b>\n\n\
                   –í—ã–±–µ—Ä–∏—Ç–µ, –±—É–¥–µ—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ 3.5:";

        bot.send_message(chat_id, text)
            .parse_mode(ParseMode::Html)
            .reply_markup(keyboard)
            .await?;
        
        Ok(())
    }

    /// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã "–¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ"
    async fn start_exact_number_game(bot: &Bot, chat_id: ChatId) -> ResponseResult<()> {
        let keyboard = InlineKeyboardMarkup::new(vec![
            vec![
                InlineKeyboardButton::callback("1Ô∏è‚É£", "number_1"),
                InlineKeyboardButton::callback("2Ô∏è‚É£", "number_2"),
                InlineKeyboardButton::callback("3Ô∏è‚É£", "number_3"),
            ],
            vec![
                InlineKeyboardButton::callback("4Ô∏è‚É£", "number_4"),
                InlineKeyboardButton::callback("5Ô∏è‚É£", "number_5"),
                InlineKeyboardButton::callback("6Ô∏è‚É£", "number_6"),
            ],
        ]);

        let text = "üéØ <b>–ò–≥—Ä–∞: –¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ</b>\n\n\
                   –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–∞–¥–µ—Ç –Ω–∞ –∫—É–±–∏–∫–µ:";

        bot.send_message(chat_id, text)
            .parse_mode(ParseMode::Html)
            .reply_markup(keyboard)
            .await?;
        
        Ok(())
    }

    /// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã "–£–≥–∞–¥–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—É"
    async fn start_guess_one_game(bot: &Bot, chat_id: ChatId) -> ResponseResult<()> {
        let keyboard = InlineKeyboardMarkup::new(vec![
            vec![
                InlineKeyboardButton::callback("‚úÖ –î–∞, –≤—ã–ø–∞–¥–µ—Ç –µ–¥–∏–Ω–∏—Ü–∞", "guess_one_yes"),
                InlineKeyboardButton::callback("‚ùå –ù–µ—Ç, –Ω–µ –≤—ã–ø–∞–¥–µ—Ç", "guess_one_no"),
            ],
        ]);

        let text = "‚öÄ <b>–ò–≥—Ä–∞: –£–≥–∞–¥–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—É</b>\n\n\
                   –í—ã–ø–∞–¥–µ—Ç –ª–∏ –Ω–∞ –∫—É–±–∏–∫–µ –µ–¥–∏–Ω–∏—Ü–∞?";

        bot.send_message(chat_id, text)
            .parse_mode(ParseMode::Html)
            .reply_markup(keyboard)
            .await?;
        
        Ok(())
    }

    /// –ò–≥—Ä–∞ "–ß–µ—Ç–Ω–æ–µ/–ù–µ—á–µ—Ç–Ω–æ–µ"
    async fn play_even_odd_game(bot: &Bot, chat_id: ChatId, choice: EvenOddChoice) -> ResponseResult<()> {
        let choice_text = match choice {
            EvenOddChoice::Even => "—á–µ—Ç–Ω–æ–µ",
            EvenOddChoice::Odd => "–Ω–µ—á–µ—Ç–Ω–æ–µ",
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(chat_id, format!("üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏: {}\nüé≤ –ë—Ä–æ—Å–∞—é –∫—É–±–∏–∫...", choice_text))
            .await?;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–±–∏–∫
        let dice_message = bot.send_dice(chat_id).await?;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞
        if let Some(dice) = dice_message.dice() {
            let dice_result = dice.value as u8;
            let is_win = DiceGame::check_even_odd(dice_result, choice.clone());
            let result_text = if dice_result % 2 == 0 { "—á–µ—Ç–Ω–æ–µ" } else { "–Ω–µ—á–µ—Ç–Ω–æ–µ" };
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É–±–∏–∫–∞
            tokio::time::sleep(tokio::time::Duration::from_secs(3)).await;
            
            let message = if is_win {
                format!(
                    "üéâ –ß–∏—Å–ª–æ {}: {}\n\n{}",
                    dice_result,
                    result_text,
                    DiceGame::win_message()
                )
            } else {
                format!(
                    "üòî –ß–∏—Å–ª–æ {}: {}\n\n{}",
                    dice_result,
                    result_text,
                    DiceGame::lose_message()
                )
            };

            bot.send_message(chat_id, message).await?;
        }
        
        // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        Self::offer_new_game(bot, chat_id).await
    }

    /// –ò–≥—Ä–∞ "–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ 3.5"
    async fn play_high_low_game(bot: &Bot, chat_id: ChatId, choice: HighLowChoice) -> ResponseResult<()> {
        let choice_text = match choice {
            HighLowChoice::High => "–±–æ–ª—å—à–µ 3.5 (4-6)",
            HighLowChoice::Low => "–º–µ–Ω—å—à–µ 3.5 (1-3)",
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(chat_id, format!("üìä –í—ã –≤—ã–±—Ä–∞–ª–∏: {}\nüé≤ –ë—Ä–æ—Å–∞—é –∫—É–±–∏–∫...", choice_text))
            .await?;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–±–∏–∫
        let dice_message = bot.send_dice(chat_id).await?;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞
        if let Some(dice) = dice_message.dice() {
            let dice_result = dice.value as u8;
            let is_win = DiceGame::check_high_low(dice_result, choice.clone());
            let result_text = if dice_result >= 4 { "–±–æ–ª—å—à–µ 3.5" } else { "–º–µ–Ω—å—à–µ 3.5" };
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É–±–∏–∫–∞
            tokio::time::sleep(tokio::time::Duration::from_secs(3)).await;
            
            let message = if is_win {
                format!(
                    "üéâ –ß–∏—Å–ª–æ {} - {}\n\n{}",
                    dice_result,
                    result_text,
                    DiceGame::win_message()
                )
            } else {
                format!(
                    "üòî –ß–∏—Å–ª–æ {} - {}\n\n{}",
                    dice_result,
                    result_text,
                    DiceGame::lose_message()
                )
            };

            bot.send_message(chat_id, message).await?;
        }
        
        // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        Self::offer_new_game(bot, chat_id).await
    }

    /// –ò–≥—Ä–∞ "–¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ"
    async fn play_exact_number_game(bot: &Bot, chat_id: ChatId, guess: u8) -> ResponseResult<()> {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(chat_id, format!("üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ: {}\nüé≤ –ë—Ä–æ—Å–∞—é –∫—É–±–∏–∫...", guess))
            .await?;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–±–∏–∫
        let dice_message = bot.send_dice(chat_id).await?;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞
        if let Some(dice) = dice_message.dice() {
            let dice_result = dice.value as u8;
            let is_win = DiceGame::check_exact_number(dice_result, guess);
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É–±–∏–∫–∞
            tokio::time::sleep(tokio::time::Duration::from_secs(3)).await;
            
            let message = if is_win {
                format!(
                    "üéâ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {}\n–í—ã —É–≥–∞–¥–∞–ª–∏!\n\n{}",
                    dice_result,
                    DiceGame::win_message()
                )
            } else {
                format!(
                    "üòî –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {}\n–í—ã –≤—ã–±—Ä–∞–ª–∏: {}\n\n{}",
                    dice_result,
                    guess,
                    DiceGame::lose_message()
                )
            };

            bot.send_message(chat_id, message).await?;
        }
        
        // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        Self::offer_new_game(bot, chat_id).await
    }

    /// –ò–≥—Ä–∞ "–£–≥–∞–¥–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—É"
    async fn play_guess_one_game(bot: &Bot, chat_id: ChatId, choice: GuessOneChoice) -> ResponseResult<()> {
        let choice_text = match choice {
            GuessOneChoice::Yes => "–¥–∞, –≤—ã–ø–∞–¥–µ—Ç –µ–¥–∏–Ω–∏—Ü–∞",
            GuessOneChoice::No => "–Ω–µ—Ç, –Ω–µ –≤—ã–ø–∞–¥–µ—Ç –µ–¥–∏–Ω–∏—Ü–∞",
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(chat_id, format!("‚öÄ –í—ã –≤—ã–±—Ä–∞–ª–∏: {}\nüé≤ –ë—Ä–æ—Å–∞—é –∫—É–±–∏–∫...", choice_text))
            .await?;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–±–∏–∫
        let dice_message = bot.send_dice(chat_id).await?;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞
        if let Some(dice) = dice_message.dice() {
            let dice_result = dice.value as u8;
            let is_win = DiceGame::check_guess_one(dice_result, choice.clone());
            let result_text = if dice_result == 1 { "–≤—ã–ø–∞–ª–∞ –µ–¥–∏–Ω–∏—Ü–∞" } else { "–µ–¥–∏–Ω–∏—Ü–∞ –Ω–µ –≤—ã–ø–∞–ª–∞" };
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É–±–∏–∫–∞
            tokio::time::sleep(tokio::time::Duration::from_secs(3)).await;
            
            let message = if is_win {
                format!(
                    "üéâ –ß–∏—Å–ª–æ {}: {}\n\n{}",
                    dice_result,
                    result_text,
                    DiceGame::win_message()
                )
            } else {
                format!(
                    "üòî –ß–∏—Å–ª–æ {}: {}\n\n{}",
                    dice_result,
                    result_text,
                    DiceGame::lose_message()
                )
            };

            bot.send_message(chat_id, message).await?;
        }
        
        // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        Self::offer_new_game(bot, chat_id).await
    }

    /// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    async fn offer_new_game(bot: &Bot, chat_id: ChatId) -> ResponseResult<()> {
        tokio::time::sleep(tokio::time::Duration::from_secs(2)).await;
        
        let text = "üéÆ –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã!";
        bot.send_message(chat_id, text).await?;
        
        Ok(())
    }

    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async fn handle_message(bot: Bot, msg: Message) -> ResponseResult<()> {
        if let Some(text) = msg.text() {
            match text.to_lowercase().as_str() {
                "–∏–≥—Ä–∞—Ç—å" | "–∏–≥—Ä–∞" | "–∫—É–±–∏–∫" | "–∫—É–±–∏–∫–∏" => {
                    Self::show_game_selection(&bot, msg.chat.id).await?;
                }
                "–ø—Ä–∏–≤–µ—Ç" | "hello" | "hi" => {
                    bot.send_message(msg.chat.id, "üé≤ –ü—Ä–∏–≤–µ—Ç! –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –≤ –∫—É–±–∏–∫–∏? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play")
                        .await?;
                }
                _ => {
                    bot.send_message(
                        msg.chat.id,
                        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /play –¥–ª—è –∏–≥—Ä—ã."
                    ).await?;
                }
            }
        }
        
        Ok(())
    }
}
