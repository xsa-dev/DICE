use rand::Rng;
use crate::state::{EvenOddChoice, HighLowChoice};

/// ะกัััะบัััะฐ ะดะปั ัะฟัะฐะฒะปะตะฝะธั ะธะณัะพะฒะพะน ะปะพะณะธะบะพะน
pub struct DiceGame;

impl DiceGame {
    /// ะัะพัะพะบ ะบัะฑะธะบะฐ - ะฒะพะทะฒัะฐัะฐะตั ัะธัะปะพ ะพั 1 ะดะพ 6
    pub fn roll_dice() -> u8 {
        let mut rng = rand::thread_rng();
        rng.gen_range(1..=6)
    }

    /// ะัะพะฒะตัะบะฐ ัะตะทัะปััะฐัะฐ ะดะปั ะธะณัั "ะงะตัะฝะพะต/ะะตัะตัะฝะพะต"
    pub fn check_even_odd(dice_result: u8, user_choice: EvenOddChoice) -> bool {
        let is_even = dice_result % 2 == 0;
        match user_choice {
            EvenOddChoice::Even => is_even,
            EvenOddChoice::Odd => !is_even,
        }
    }

    /// ะัะพะฒะตัะบะฐ ัะตะทัะปััะฐัะฐ ะดะปั ะธะณัั "ะะพะปััะต/ะะตะฝััะต 3.5"
    pub fn check_high_low(dice_result: u8, user_choice: HighLowChoice) -> bool {
        match user_choice {
            HighLowChoice::High => dice_result >= 4,
            HighLowChoice::Low => dice_result <= 3,
        }
    }

    /// ะัะพะฒะตัะบะฐ ัะตะทัะปััะฐัะฐ ะดะปั ะธะณัั "ะขะพัะฝะพะต ัะธัะปะพ"
    pub fn check_exact_number(dice_result: u8, user_guess: u8) -> bool {
        dice_result == user_guess
    }

    /// ะะพะปััะตะฝะธะต ัะผะพะดะทะธ ะบัะฑะธะบะฐ ะฟะพ ัะธัะปั
    pub fn dice_emoji(number: u8) -> &'static str {
        match number {
            1 => "โ",
            2 => "โ",
            3 => "โ",
            4 => "โ",
            5 => "โ",
            6 => "โ",
            _ => "๐ฒ",
        }
    }

    /// ะะพะปััะตะฝะธะต ัะพะพะฑัะตะฝะธั ะพ ะฒัะธะณัััะต
    pub fn win_message() -> &'static str {
        let messages = [
            "๐ ะะพะทะดัะฐะฒะปัั! ะั ัะณะฐะดะฐะปะธ!",
            "๐ ะัะปะธัะฝะพ! ะัะฐะฒะธะปัะฝัะน ะพัะฒะตั!",
            "โจ ะะตะปะธะบะพะปะตะฟะฝะพ! ะั ะฟะพะฑะตะดะธะปะธ!",
            "๐ ะัะฐะฒะพ! ะขะพัะฝะพะต ะฟะพะฟะฐะดะฐะฝะธะต!",
            "๐ฏ ะัะตะฒะพััะพะดะฝะพ! ะั ัะณะฐะดะฐะปะธ!",
        ];
        let mut rng = rand::thread_rng();
        let index = rng.gen_range(0..messages.len());
        messages[index]
    }

    /// ะะพะปััะตะฝะธะต ะพะฑะพะดััััะตะณะพ ัะพะพะฑัะตะฝะธั ะฟัะธ ะฟัะพะธะณัััะต
    pub fn lose_message() -> &'static str {
        let messages = [
            "๐ ะะต ัะณะฐะดะฐะปะธ, ะฝะพ ะฝะต ัะฐััััะฐะธะฒะฐะนัะตัั!",
            "๐ฒ ะ ััะพั ัะฐะท ะฝะต ะฟะพะฒะตะทะปะพ, ะฟะพะฟัะพะฑัะนัะต ะตัะต!",
            "๐ช ะะธัะตะณะพ ัััะฐัะฝะพะณะพ, ัะดะฐัะฐ ัะปัะฑะฝะตััั ะฒ ัะปะตะดัััะธะน ัะฐะท!",
            "๐ ะะต ะฟะตัะตะถะธะฒะฐะนัะต, ั ะฒะฐั ะฒัะต ะฟะพะปััะธััั!",
            "๐ฎ ะะพะฟััะบะฐ ะฝะต ะฟััะบะฐ, ะธะณัะฐะตะผ ะตัะต!",
        ];
        let mut rng = rand::thread_rng();
        let index = rng.gen_range(0..messages.len());
        messages[index]
    }
}
